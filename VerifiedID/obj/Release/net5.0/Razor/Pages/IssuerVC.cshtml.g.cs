#pragma checksum "C:\Users\elias.ekonomou\OneDrive - Avanade\MS Identity Hackathon\Issuer\active-directory-verifiable-credentials-dotnet\1-asp-net-core-api-idtokenhint\Pages\IssuerVC.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "44fcdf1fe4ca0a2b66dbe8d88fe13e084d40f4a8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreVerifiableCredentials.Pages.Pages_IssuerVC), @"mvc.1.0.razor-page", @"/Pages/IssuerVC.cshtml")]
namespace AspNetCoreVerifiableCredentials.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\elias.ekonomou\OneDrive - Avanade\MS Identity Hackathon\Issuer\active-directory-verifiable-credentials-dotnet\1-asp-net-core-api-idtokenhint\Pages\_ViewImports.cshtml"
using AspNetCoreVerifiableCredentials;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"44fcdf1fe4ca0a2b66dbe8d88fe13e084d40f4a8", @"/Pages/IssuerVC.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c9a6c6105e21e45cb7ef575038cfac3da5f8e208", @"/Pages/_ViewImports.cshtml")]
    public class Pages_IssuerVC : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\elias.ekonomou\OneDrive - Avanade\MS Identity Hackathon\Issuer\active-directory-verifiable-credentials-dotnet\1-asp-net-core-api-idtokenhint\Pages\IssuerVC.cshtml"
  
    ViewData["Title"] = "Issuer";

#line default
#line hidden
#nullable disable
            WriteLiteral("<div style=\"text-align: center;\">\r\n    <h1>Orange Interstellar Corp Events</h1>\r\n    <div id=\"qrText\"");
            BeginWriteAttribute("style", " style=\"", 210, "\"", 218, 0);
            EndWriteAttribute();
            WriteLiteral(@">
        <p class=""small-text"">
            <img src=""authenticator-icon.png"" alt=""Authenticator icon"" class=""icon-small""><br>
            Scan with Microsoft Authenticator
        </p>
    </div>
    <a id=""deeplink"" style=""display: none;margin-top: 10px;"">Tap to open Authenticator on mobile</a>
    <div id=""qrcode"" style=""text-align: center""></div>
    <div id=""pinCodeText"" style=""display: none""></div>

    <div id=""message-wrapper"" class=""margin-bottom-75 margin-top-75"" style=""display: none"">
        <i class=""fas fa-user-check green icon-text-large margin-bottom-25""></i>
        <div id=""message""></div>
    </div>

    <script src=""qrcode.min.js""></script>
    <script>
        var qrcode = new QRCode(""qrcode"", { width: 300, height: 300 });
        var respIssuanceReq = null;
        var search = location.search.substring(1);
        urlParams = JSON.parse('{""' + search.replace(/&/g, '"",""').replace(/=/g, '"":""') + '""}', function (key, value) { return key === """" ? value : decodeURICompon");
            WriteLiteral(@"ent(value) })
        var id = urlParams.id;

        window.addEventListener('load', function() {
            fetch('/api/issuer/issuance-request?id=' + id)
                .then(function (response) {
                    response.text()
                        .catch(error => document.getElementById(""message"").innerHTML = error)
                        .then(function (message) {
                            respIssuanceReq = JSON.parse(message);
                            if (/Android/i.test(navigator.userAgent)) {
                                console.log(`Android device! Using deep link (${respIssuanceReq.url}).`);
                                window.location.href = respIssuanceReq.url; setTimeout(function () {
                                    window.location.href = ""https://play.google.com/store/apps/details?id=com.azure.authenticator"";
                                }, 2000);
                            } else if (/iPhone/i.test(navigator.userAgent)) {
                           ");
            WriteLiteral(@"     console.log(`iOS device! Using deep link (${respIssuanceReq.url}).`);
                                window.location.replace(respIssuanceReq.url);
                            } else {
                                console.log(`Not Android or IOS. Generating QR code encoded with ${message}`);
                                qrcode.makeCode(respIssuanceReq.url);
                                document.getElementById('qrText').style.display = ""block"";
                                if (respIssuanceReq.pin) {
                                    document.getElementById('pinCodeText').innerHTML = ""<br/>Pin code: "" + respIssuanceReq.pin;
                                    document.getElementById('pinCodeText').style.display = ""block"";
                                }
                            }
                        }).catch(error => { console.log(error.message); })
                }).catch(error => { console.log(error.message); })

            var checkStatus = setInterval(function () ");
            WriteLiteral(@"{
                fetch('api/issuer/issuance-response?id=' + respIssuanceReq.id)
                    .then(response => response.text())
                    .catch(error => document.getElementById(""message"").innerHTML = error)
                    .then(response => {
                        if (response.length > 0) {
                            console.log(response)
                            respMsg = JSON.parse(response);
                            // QR Code scanned, show pincode if pincode is required
                            if (respMsg.status == 'request_retrieved') {
                                document.getElementById('message-wrapper').style.display = ""block"";
                                document.getElementById('qrText').style.display = ""none"";
                                document.getElementById('qrcode').style.display = ""none"";

                                if (respMsg.pin) {
                                    document.getElementById('pinCodeText').style.display = ""v");
            WriteLiteral(@"isible"";
                                }
                                document.getElementById('message').innerHTML = respMsg.message;
                            }
                            if (respMsg.status == 'issuance_successful') {
                                document.getElementById('pinCodeText').style.display = ""none"";
                                document.getElementById('message').innerHTML = respMsg.message;
                                clearInterval(checkStatus);
                                window.close();
                            }
                            if (respMsg.status == 'issuance_error') {
                                document.getElementById('pinCodeText').style.display = ""none"";
                                document.getElementById('message').innerHTML = ""Issuance error occured, did you enter the wrong pincode? Please refresh the page and try again."";
                                clearInterval(checkStatus);
                            }
   ");
            WriteLiteral("                     }\r\n                    })\r\n            }, 1500); //change this to higher interval if you use ngrok to prevent overloading the free tier service\r\n        })\r\n    </script>\r\n</div>\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<AspNetCoreVerifiableCredentials.Pages.IssuerVCModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<AspNetCoreVerifiableCredentials.Pages.IssuerVCModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<AspNetCoreVerifiableCredentials.Pages.IssuerVCModel>)PageContext?.ViewData;
        public AspNetCoreVerifiableCredentials.Pages.IssuerVCModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
